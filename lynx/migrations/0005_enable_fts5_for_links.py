# Generated by Django 5.0 on 2023-12-06 19:11

from django.db import migrations


class Migration(migrations.Migration):

  dependencies = [
      ('lynx', '0004_usersetting_lynx_api_key'),
  ]

  operations = [
      migrations.RunSQL('''
        CREATE VIRTUAL TABLE lynx_link_fts USING FTS5(raw_text_content, title, excerpt, creator_id UNINDEXED, content=lynx_link);

        INSERT INTO lynx_link_fts(lynx_link_fts) VALUES ('rebuild');

        CREATE TRIGGER lynx_link_fts_insert AFTER INSERT ON lynx_link
        BEGIN
            INSERT INTO lynx_link_fts (rowid, raw_text_content, title, excerpt, creator_id) VALUES (new.rowid, new.raw_text_content, new.title, new.excerpt, new.creator_id);
        END;

        CREATE TRIGGER lynx_link_fts_delete AFTER DELETE ON lynx_link
        BEGIN
            INSERT INTO lynx_link_fts (lynx_link_fts, rowid, raw_text_content, title, excerpt, creator_id) VALUES ('delete', old.rowid, old.raw_text_content, old.title, old.excerpt, old.creator_id);
        END;

        CREATE TRIGGER lynx_link_fts_update AFTER UPDATE OF raw_text_content, title, excerpt, creator_id ON lynx_link 
        BEGIN
            INSERT INTO lynx_link_fts (lynx_link_fts, rowid, raw_text_content, title, excerpt, creator_id) VALUES ('delete', old.rowid, old.raw_text_content, old.title, old.excerpt, old.creator_id);
            INSERT INTO lynx_link_fts (rowid, raw_text_content, title, excerpt, creator_id) VALUES (new.rowid, new.raw_text_content, new.title, new.excerpt, new.creator_id);
        END;
        ''',
                        reverse_sql='''
       DROP TRIGGER IF EXISTS lynx_link_fts_update;
       DROP TRIGGER IF EXISTS lynx_link_fts_delete;
       DROP TRIGGER IF EXISTS lynx_link_fts_insert;
       DROP TABLE IF EXISTS lynx_link_fts;
       ''')
  ]
